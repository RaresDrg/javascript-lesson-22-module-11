{"mappings":"iiBACA,I,EAAAA,EAAAC,EAAA,S,aAAMC,G,EAAaC,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAC,I,IACXC,EACAC,EACAC,EACAC,EAEAC,E,yEALAJ,EAAU,uCACVC,EAAgBI,MAAM,GAAWC,OAARN,EAAQ,aACjCE,EAAiBG,MAAM,GAAWC,OAARN,EAAQ,aAClCG,EAAgBE,MAAM,GAAWC,OAARN,EAAQ,a,KAETO,Q,SACrBN,E,mBAAPO,EAAAC,KAAsBC,O,UACfR,E,oBAAPM,EAAAC,KAAuBC,O,UAChBP,E,oBAAPK,EAAAC,KAAsBC,O,KAHkB,C,0BAAZF,EAAAG,GAAQC,IAAGC,KAAAL,EAAAG,GAAAH,EAAAM,I,QAAnCV,EAAeI,EAAAC,KAKrBM,QAAQC,IAAIZ,EAAiB,6B,wFAE/BT,IAGA,IAAMsB,EAAW,W,MAAGrB,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAC,I,IACZC,EAEAC,EACAC,EACAC,EAEAe,EACAC,EACAC,EAEAhB,E,yEAVAJ,EAAU,uCAEVC,EAAgBI,MAAM,GAAWC,OAARN,EAAQ,aACjCE,EAAiBG,MAAM,GAAWC,OAARN,EAAQ,aAClCG,EAAgBE,MAAM,GAAWC,OAARN,EAAQ,a,SAEdC,E,cAAnBiB,EAAYV,EAAAC,KAAsBC,O,SACdR,E,cAApBiB,EAAaX,EAAAC,KAAuBC,O,UACjBP,E,eAAnBiB,EAAYZ,EAAAC,KAAsBC,O,UAEVH,QAAQK,IAAI,CAACM,EAAWC,EAAYC,I,QAA5DhB,EAAeI,EAAAC,KACrBM,QAAQC,IAAIZ,EAAiB,sC,8FAZd,GAcjBa,IAGA,I,EAAMI,G,EAAczB,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAwB,I,IAKZlB,EAMAmB,E,yEANAnB,EAHU,CAAC,EAAG,EAAG,GAGSoB,IAAG,W,MAAC5B,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAC,EAAM0B,G,IAClCC,E,kFAAiBrB,MAAM,GAAoBC,OALnC,uCAK0B,WAAgBA,OAAPmB,I,cAA3CC,EAAQlB,EAAAC,K,kBACPiB,EAAShB,Q,2DAFwBe,G,gCAAP,I,SAMflB,QAAQK,IAAIR,G,OAA1BmB,EAAKI,EAAAlB,KACXM,QAAQC,IAAIO,G,uFAGdF,G","sources":["src/js/02-example-2.js"],"sourcesContent":["// Decodare in promise.all //\nconst fetchUsers = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n  const firstResponse = fetch(`${baseUrl}/users/1`);\n  const secondResponse = fetch(`${baseUrl}/users/2`);\n  const thirdResponse = fetch(`${baseUrl}/users/3`);\n\n  const arrayOfPromises = await Promise.all([\n    (await firstResponse).json(),\n    (await secondResponse).json(),\n    (await thirdResponse).json(),\n  ]);\n  console.log(arrayOfPromises, '\"decodare\" in promise.all');\n};\nfetchUsers();\n\n// Decodare separata //\nconst fetchUsers1 = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n\n  const firstResponse = fetch(`${baseUrl}/users/4`);\n  const secondResponse = fetch(`${baseUrl}/users/5`);\n  const thirdResponse = fetch(`${baseUrl}/users/6`);\n\n  const firstData = (await firstResponse).json();\n  const secondData = (await secondResponse).json();\n  const thirdData = (await thirdResponse).json();\n\n  const arrayOfPromises = await Promise.all([firstData, secondData, thirdData]);\n  console.log(arrayOfPromises, '\"decodare\" separata pentru fiecare');\n};\nfetchUsers1();\n\n//Decodare: map, conspect //\nconst fetchUsers2 = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n  const userIds = [7, 8, 9];\n\n  // 1. Creăm o matrice de promisuri\n  const arrayOfPromises = userIds.map(async userId => {\n    const response = await fetch(`${baseUrl}/users/${userId}`);\n    return response.json();\n  });\n\n  // 2. Rulăm toate promisurile în paralel și așteptăm ca acestea să se finalizeze\n  const users = await Promise.all(arrayOfPromises);\n  console.log(users);\n};\n\nfetchUsers2();\n"],"names":["$bpxeT","parcelRequire","$19e35243e6fddf07$var$fetchUsers","$parcel$interopDefault","$2TvXO","mark","_callee","baseUrl","firstResponse","secondResponse","thirdResponse","arrayOfPromises","fetch","concat","Promise","_ctx","sent","json","t0","all","call","t4","console","log","$19e35243e6fddf07$var$fetchUsers1","firstData","secondData","thirdData","$19e35243e6fddf07$var$fetchUsers2","_callee1","users","map","userId","response","_ctx1"],"version":3,"file":"02-example-2.5c3401ba.js.map"}