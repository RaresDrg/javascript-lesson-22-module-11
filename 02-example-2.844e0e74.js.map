{"mappings":"AACmBA,WACjB,MAAMC,EAAU,uCACVC,EAAgBC,MAAM,GAAGF,aACzBG,EAAiBD,MAAM,GAAGF,aAC1BI,EAAgBF,MAAM,GAAGF,aAEzBK,QAAwBC,QAAQC,IAAI,QACjCN,GAAeO,cACfL,GAAgBK,cAChBJ,GAAeI,SAExBC,QAAQC,IAAIL,EAAiB,4BAA4B,EAE3DM,GAGoBZ,WAClB,MAAMC,EAAU,uCAEVC,EAAgBC,MAAM,GAAGF,aACzBG,EAAiBD,MAAM,GAAGF,aAC1BI,EAAgBF,MAAM,GAAGF,aAEzBY,SAAmBX,GAAeO,OAClCK,SAAoBV,GAAgBK,OACpCM,SAAmBV,GAAeI,OAElCH,QAAwBC,QAAQC,IAAI,CAACK,EAAWC,EAAYC,IAClEL,QAAQC,IAAIL,EAAiB,qCAAqC,EAEpEU,GAGoBhB,WAClB,MAIMM,EAHU,CAAC,EAAG,EAAG,GAGSW,KAAIjB,MAAMkB,UACjBf,MAAM,8CAAoBe,MACjCT,SAIZU,QAAcZ,QAAQC,IAAIF,GAChCI,QAAQC,IAAIQ,EAAM,EAGpBC","sources":["src/js/02-example-2.js"],"sourcesContent":["// Decodare in promise.all //\nconst fetchUsers = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n  const firstResponse = fetch(`${baseUrl}/users/1`);\n  const secondResponse = fetch(`${baseUrl}/users/2`);\n  const thirdResponse = fetch(`${baseUrl}/users/3`);\n\n  const arrayOfPromises = await Promise.all([\n    (await firstResponse).json(),\n    (await secondResponse).json(),\n    (await thirdResponse).json(),\n  ]);\n  console.log(arrayOfPromises, '\"decodare\" in promise.all');\n};\nfetchUsers();\n\n// Decodare separata //\nconst fetchUsers1 = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n\n  const firstResponse = fetch(`${baseUrl}/users/4`);\n  const secondResponse = fetch(`${baseUrl}/users/5`);\n  const thirdResponse = fetch(`${baseUrl}/users/6`);\n\n  const firstData = (await firstResponse).json();\n  const secondData = (await secondResponse).json();\n  const thirdData = (await thirdResponse).json();\n\n  const arrayOfPromises = await Promise.all([firstData, secondData, thirdData]);\n  console.log(arrayOfPromises, '\"decodare\" separata pentru fiecare');\n};\nfetchUsers1();\n\n//Decodare: map, conspect //\nconst fetchUsers2 = async () => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n  const userIds = [7, 8, 9];\n\n  // 1. Creăm o matrice de promisuri\n  const arrayOfPromises = userIds.map(async userId => {\n    const response = await fetch(`${baseUrl}/users/${userId}`);\n    return response.json();\n  });\n\n  // 2. Rulăm toate promisurile în paralel și așteptăm ca acestea să se finalizeze\n  const users = await Promise.all(arrayOfPromises);\n  console.log(users);\n};\n\nfetchUsers2();\n"],"names":["async","baseUrl","firstResponse","fetch","secondResponse","thirdResponse","arrayOfPromises","Promise","all","json","console","log","$66b75e2bbafe1619$var$fetchUsers","firstData","secondData","thirdData","$66b75e2bbafe1619$var$fetchUsers1","map","userId","users","$66b75e2bbafe1619$var$fetchUsers2"],"version":3,"file":"02-example-2.844e0e74.js.map"}